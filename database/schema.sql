-- Enable UUID extension for user IDs
create extension if not exists "uuid-ossp";

-- Categories table
create table categories (
  id bigint primary key generated by default as identity,
  name text not null,
  slug text not null unique,
  description text,
  image text,
  active boolean default true,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Businesses table
create table businesses (
  id bigint primary key generated by default as identity,
  name text not null,
  slug text not null unique,
  description text,
  status text not null default 'pending' check (status in ('active', 'inactive', 'pending')),
  image text,
  phone text,
  email text,
  website text,
  address text,
  city text,
  state text,
  postal_code text,
  country text,
  category_id bigint references categories(id) on delete restrict,
  owner_id uuid references auth.users(id) on delete set null,
  verified boolean default false,
  verification_submitted_at timestamp with time zone,
  verification_approved_at timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Business hours table
create table business_hours (
  id bigint primary key generated by default as identity,
  business_id bigint references businesses(id) on delete cascade,
  day_of_week smallint not null check (day_of_week between 0 and 6),
  open_time time,
  close_time time,
  is_closed boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(business_id, day_of_week)
);

-- Business photos table
create table business_photos (
  id bigint primary key generated by default as identity,
  business_id bigint references businesses(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  url text not null,
  caption text,
  approved boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Reviews table
create table reviews (
  id bigint primary key generated by default as identity,
  business_id bigint references businesses(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  rating smallint not null check (rating between 1 and 5),
  content text,
  status text not null default 'pending' check (status in ('pending', 'approved', 'rejected')),
  helpful_votes integer default 0,
  reported boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Review photos table
create table review_photos (
  id bigint primary key generated by default as identity,
  review_id bigint references reviews(id) on delete cascade,
  url text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Review responses (from business owners)
create table review_responses (
  id bigint primary key generated by default as identity,
  review_id bigint references reviews(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  content text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(review_id)
);

-- Review helpful votes
create table review_helpful_votes (
  id bigint primary key generated by default as identity,
  review_id bigint references reviews(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(review_id, user_id)
);

-- Review reports
create table review_reports (
  id bigint primary key generated by default as identity,
  review_id bigint references reviews(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  reason text not null,
  status text not null default 'pending' check (status in ('pending', 'resolved', 'dismissed')),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Business claims
create table business_claims (
  id bigint primary key generated by default as identity,
  business_id bigint references businesses(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  status text not null default 'pending' check (status in ('pending', 'approved', 'rejected')),
  verification_document text,
  rejection_reason text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Business FAQs
create table business_faqs (
  id bigint primary key generated by default as identity,
  business_id bigint references businesses(id) on delete cascade,
  question text not null,
  answer text not null,
  order_index integer default 0,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- User profiles (extends auth.users)
create table profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  full_name text,
  avatar_url text,
  bio text,
  role text not null default 'user' check (role in ('user', 'business_owner', 'admin')),
  status text not null default 'active' check (status in ('active', 'suspended')),
  review_count integer default 0,
  helpful_votes_count integer default 0,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- User badges
create table badges (
  id bigint primary key generated by default as identity,
  name text not null,
  description text,
  icon text,
  criteria jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- User earned badges
create table user_badges (
  id bigint primary key generated by default as identity,
  user_id uuid references auth.users(id) on delete cascade,
  badge_id bigint references badges(id) on delete cascade,
  earned_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, badge_id)
);

-- Create indexes for better query performance
create index idx_businesses_category_id on businesses(category_id);
create index idx_businesses_owner_id on businesses(owner_id);
create index idx_businesses_status on businesses(status);
create index idx_reviews_business_id on reviews(business_id);
create index idx_reviews_user_id on reviews(user_id);
create index idx_reviews_status on reviews(status);
create index idx_business_claims_business_id on business_claims(business_id);
create index idx_business_claims_user_id on business_claims(user_id);
create index idx_business_claims_status on business_claims(status);

-- Create functions for updating timestamps
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

-- Create triggers for updating timestamps
create trigger update_categories_updated_at before update
  on categories for each row execute function update_updated_at_column();

create trigger update_businesses_updated_at before update
  on businesses for each row execute function update_updated_at_column();

create trigger update_business_hours_updated_at before update
  on business_hours for each row execute function update_updated_at_column();

create trigger update_business_photos_updated_at before update
  on business_photos for each row execute function update_updated_at_column();

create trigger update_reviews_updated_at before update
  on reviews for each row execute function update_updated_at_column();

create trigger update_review_responses_updated_at before update
  on review_responses for each row execute function update_updated_at_column();

create trigger update_review_reports_updated_at before update
  on review_reports for each row execute function update_updated_at_column();

create trigger update_business_claims_updated_at before update
  on business_claims for each row execute function update_updated_at_column();

create trigger update_business_faqs_updated_at before update
  on business_faqs for each row execute function update_updated_at_column();

create trigger update_profiles_updated_at before update
  on profiles for each row execute function update_updated_at_column();

-- Create RLS policies
alter table categories enable row level security;
alter table businesses enable row level security;
alter table business_hours enable row level security;
alter table business_photos enable row level security;
alter table reviews enable row level security;
alter table review_photos enable row level security;
alter table review_responses enable row level security;
alter table review_helpful_votes enable row level security;
alter table review_reports enable row level security;
alter table business_claims enable row level security;
alter table business_faqs enable row level security;
alter table profiles enable row level security;
alter table badges enable row level security;
alter table user_badges enable row level security;

-- Example RLS policies (customize based on your needs)
create policy "Public categories are viewable by everyone"
  on categories for select
  using (active = true);

create policy "Categories are manageable by admins"
  on categories for all
  using (exists (
    select 1 from profiles
    where profiles.id = auth.uid()
    and profiles.role = 'admin'
  ));

create policy "Businesses are viewable by everyone"
  on businesses for select
  using (status = 'active');

create policy "Businesses are manageable by admins and owners"
  on businesses for all
  using (
    exists (
      select 1 from profiles
      where profiles.id = auth.uid()
      and (profiles.role = 'admin' or businesses.owner_id = auth.uid())
    )
  );

-- Add more policies as needed for other tables